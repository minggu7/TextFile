기획 및 설계 단계

목표 정의: 쇼핑몰의 목적과 대상 고객층을 정의합니다. 예를 들어, 어떤 상품을 판매할 것인지, 주요 타겟층은 누구인지 등을 명확히 합니다.
기능 정의: 쇼핑몰에 필요한 기능들을 나열합니다. 예: 회원가입, 로그인, 상품 목록, 장바구니, 주문 및 결제 등
와이어프레임: 사이트 구조와 UI/UX 디자인을 간단한 도식으로 그려봅니다. 어떤 페이지에 어떤 요소가 배치될지에 대한 구상을 합니다.
기술 스택 결정: 쇼핑몰을 개발할 때 사용할 언어, 프레임워크, 데이터베이스 등을 결정합니다. 예: React (프론트엔드), Node.js or Spring Boot (백엔드), MySQL or MongoDB (데이터베이스)
UI/UX 디자인: 실제 화면을 어떻게 디자인할지, 사용자가 어떻게 상호작용할지 구체화합니다.
프론트엔드 개발

페이지 구성: 사용자 인터페이스(UI)와 각 페이지를 디자인하고, 필요한 컴포넌트(예: 상품 리스트, 카테고리 필터, 장바구니, 결제 버튼 등)를 구현합니다.
상품 목록 페이지: 사용자들이 상품을 볼 수 있는 화면을 만들어야 합니다. 예를 들어, 각 상품에 대한 이름, 가격, 이미지 등을 표시합니다.
회원 가입 및 로그인 페이지: 회원 가입, 로그인, 로그아웃 기능을 구현합니다.
상세 페이지: 각 상품을 클릭했을 때 상품에 대한 세부 정보를 보여주는 페이지를 만듭니다.
장바구니 및 결제 시스템: 사용자가 장바구니에 담은 상품을 확인하고 결제할 수 있는 페이지를 구현합니다.
백엔드 개발

회원 관리: 사용자 정보(회원가입, 로그인, 비밀번호 변경 등)를 관리하는 시스템을 구현합니다.
상품 관리: 상품 정보를 CRUD(생성, 읽기, 수정, 삭제)할 수 있는 관리 기능을 구현합니다.
주문 및 결제 시스템: 사용자가 주문한 상품을 처리하고 결제를 처리하는 로직을 작성합니다.
DB 설계: 데이터베이스 테이블을 설계하여 상품, 사용자, 주문 정보 등을 저장합니다.
API 구현: 프론트엔드와 통신할 수 있도록 RESTful API를 개발합니다. 예를 들어, 상품 목록 조회, 장바구니 담기, 주문 처리 API 등이 있습니다.
결제 시스템 연동

결제 게이트웨이 선택: 실제 결제를 처리할 결제 시스템(카드 결제, 계좌이체, 모바일 결제 등)을 연동합니다.
결제 API 연동: 외부 결제 서비스(API)를 연동하여 결제 처리를 합니다. 예: PayPal, Stripe, 카카오페이, 네이버페이 등.
보안 처리: 결제 관련 정보를 안전하게 처리할 수 있도록 보안 조치를 취합니다. SSL 인증서 적용 등.
배포 및 운영

서버 구축: 애플리케이션을 배포할 서버를 구축합니다. 예를 들어, AWS, Google Cloud, Heroku, DigitalOcean 등의 클라우드 서버를 이용할 수 있습니다.
CI/CD: 코드가 변경될 때마다 자동으로 빌드, 테스트, 배포되는 시스템을 구축합니다.
디버깅 및 최적화: 로깅, 모니터링, 성능 최적화 작업을 통해 애플리케이션이 원활하게 동작하도록 합니다.
웹사이트 SEO 최적화: 검색엔진에서 잘 노출되도록 SEO 최적화를 합니다.
배포 및 테스트: 사이트를 실제로 배포하여 유저들이 테스트하고 피드백을 받을 수 있도록 합니다.

쇼핑몰 개발에 필요한 기본적인 구성 요소
1. 프론트엔드
헤더 (Header): 로고, 네비게이션 바, 검색바, 로그인/회원가입 버튼, 장바구니 등을 포함합니다.
상품 목록 (Product Listing): 상품을 카테고리별로 분류하고, 가격, 이미지, 이름 등을 표시합니다.
상세 페이지 (Product Detail): 상품 클릭 시 상세 정보를 제공하며, 구매 옵션(사이즈, 색상 등)과 장바구니 버튼이 포함됩니다.
장바구니 (Cart): 사용자가 선택한 상품을 장바구니에 담고, 수량 조정 및 삭제 기능이 필요합니다.
주문/결제 페이지 (Checkout): 배송 주소, 결제 방식 등을 입력받고 결제를 처리합니다.
푸터 (Footer): 사이트 운영 정보, 연락처, 개인정보 처리 방침, 이용 약관 등을 표시합니다.
2. 백엔드
회원 관리 시스템 (User Management): 회원 가입, 로그인, 비밀번호 찾기, 마이 페이지 관리 등.
상품 관리 시스템 (Product Management): 상품의 CRUD(생성, 조회, 수정, 삭제) 기능.
장바구니 시스템 (Cart Management): 사용자가 장바구니에 상품을 담고 주문할 수 있는 기능.
주문 관리 시스템 (Order Management): 사용자가 주문한 상품을 처리하고, 주문 상태를 관리.
결제 시스템 (Payment Integration): 결제 정보를 처리하고 외부 결제 서비스와 연동.
3. 데이터베이스
회원 정보 테이블: 사용자 이름, 이메일, 비밀번호, 주소, 결제 정보 등을 저장.
상품 정보 테이블: 상품 이름, 가격, 이미지, 설명, 재고 수량 등을 저장.
주문 정보 테이블: 주문 번호, 사용자 정보, 주문한 상품, 가격, 상태 등을 저장.
장바구니 테이블: 사용자가 장바구니에 담은 상품 정보.

카테고리 별로 검색을 구현하려면 비동기 요청을 활용하여 필요한 데이터만 가져오고, 특정 컴포넌트만 업데이트하는 방식이 일반적

클라이언트에서 사용자가 카테고리를 선택하면, 해당 선택 값(예: electronics, fashion)이 서버로 전달됩니다.
서버는 이 입력 데이터를 기준으로 SQL 조회문을 작성하여 데이터베이스에서 관련 데이터를 가져옵니다.

현재 구조에서 카테고리 검색 하여 동적인 값으로 sql의 제품 테이블 검색 후 ... 상품 삽입시 제품 이미지 없으면 기본으로 제공되는 디폴트 사진 url.....